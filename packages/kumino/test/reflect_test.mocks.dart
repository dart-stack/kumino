// Mocks generated by Mockito 5.4.4 from annotations
// in kumino/test/reflect_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:mirrors' as _i4;

import 'package:kumino/src/dependency_injection/container.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObject_0 extends _i1.SmartFake implements Object {
  _FakeObject_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DIContainer].
///
/// See the documentation for Mockito's code generation for more information.
class MockDIContainer extends _i1.Mock implements _i2.DIContainer {
  @override
  void add(Type? classType) => super.noSuchMethod(
        Invocation.method(
          #add,
          [classType],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.FutureOr<Object> resolve(Type? classType) => (super.noSuchMethod(
        Invocation.method(
          #resolve,
          [classType],
        ),
        returnValue: _i3.Future<Object>.value(_FakeObject_0(
          this,
          Invocation.method(
            #resolve,
            [classType],
          ),
        )),
        returnValueForMissingStub: _i3.Future<Object>.value(_FakeObject_0(
          this,
          Invocation.method(
            #resolve,
            [classType],
          ),
        )),
      ) as _i3.FutureOr<Object>);

  @override
  _i3.FutureOr<(List<Object>, Map<Symbol, Object>)> resolveDeps(
          _i4.MethodMirror? constructor) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveDeps,
          [constructor],
        ),
        returnValue: _i3.Future<(List<Object>, Map<Symbol, Object>)>.value(
            (<Object>[], <Symbol, Object>{})),
        returnValueForMissingStub:
            _i3.Future<(List<Object>, Map<Symbol, Object>)>.value(
                (<Object>[], <Symbol, Object>{})),
      ) as _i3.FutureOr<(List<Object>, Map<Symbol, Object>)>);
}
