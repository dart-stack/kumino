// Mocks generated by Mockito 5.4.4 from annotations
// in kumino/test/kumino_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpHeaders_1 extends _i1.SmartFake implements _i2.HttpHeaders {
  _FakeHttpHeaders_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpSession_2 extends _i1.SmartFake implements _i2.HttpSession {
  _FakeHttpSession_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpResponse_3 extends _i1.SmartFake implements _i2.HttpResponse {
  _FakeHttpResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_4<T> extends _i1.SmartFake
    implements _i3.StreamSubscription<T> {
  _FakeStreamSubscription_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_5<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpRequest extends _i1.Mock implements _i2.HttpRequest {
  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  Uri get requestedUri => (super.noSuchMethod(
        Invocation.getter(#requestedUri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#requestedUri),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.getter(#requestedUri),
        ),
      ) as Uri);

  @override
  _i2.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
        returnValueForMissingStub: _FakeHttpHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.HttpHeaders);

  @override
  List<_i2.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i2.Cookie>[],
        returnValueForMissingStub: <_i2.Cookie>[],
      ) as List<_i2.Cookie>);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.HttpSession get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeHttpSession_2(
          this,
          Invocation.getter(#session),
        ),
        returnValueForMissingStub: _FakeHttpSession_2(
          this,
          Invocation.getter(#session),
        ),
      ) as _i2.HttpSession);

  @override
  String get protocolVersion => (super.noSuchMethod(
        Invocation.getter(#protocolVersion),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#protocolVersion),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#protocolVersion),
        ),
      ) as String);

  @override
  _i2.HttpResponse get response => (super.noSuchMethod(
        Invocation.getter(#response),
        returnValue: _FakeHttpResponse_3(
          this,
          Invocation.getter(#response),
        ),
        returnValueForMissingStub: _FakeHttpResponse_3(
          this,
          Invocation.getter(#response),
        ),
      ) as _i2.HttpResponse);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i5.Uint8List> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Future<_i5.Uint8List> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Future<_i5.Uint8List> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Stream<_i5.Uint8List> asBroadcastStream({
    void Function(_i3.StreamSubscription<_i5.Uint8List>)? onListen,
    void Function(_i3.StreamSubscription<_i5.Uint8List>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.StreamSubscription<_i5.Uint8List> listen(
    void Function(_i5.Uint8List)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_4<_i5.Uint8List>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_4<_i5.Uint8List>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i3.StreamSubscription<_i5.Uint8List>);

  @override
  _i3.Stream<_i5.Uint8List> where(bool Function(_i5.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.Stream<S> map<S>(S Function(_i5.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Stream<E> asyncMap<E>(_i3.FutureOr<E> Function(_i5.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i3.Stream<E>.empty(),
        returnValueForMissingStub: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<E> asyncExpand<E>(
          _i3.Stream<E>? Function(_i5.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i3.Stream<E>.empty(),
        returnValueForMissingStub: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<_i5.Uint8List> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.Stream<S> expand<S>(Iterable<S> Function(_i5.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<dynamic> pipe(_i3.StreamConsumer<_i5.Uint8List>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Stream<S> transform<S>(
          _i3.StreamTransformer<_i5.Uint8List, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<_i5.Uint8List> reduce(
          _i5.Uint8List Function(
            _i5.Uint8List,
            _i5.Uint8List,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      _i5.Uint8List,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i3.Future<S>.value(v),
            ) ??
            _FakeFuture_5<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
        returnValueForMissingStub: _i4.ifNotNull(
              _i4.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i3.Future<S>.value(v),
            ) ??
            _FakeFuture_5<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i3.Future<S>);

  @override
  _i3.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> forEach(void Function(_i5.Uint8List)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> every(bool Function(_i5.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> any(bool Function(_i5.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i3.Stream<R>.empty(),
        returnValueForMissingStub: _i3.Stream<R>.empty(),
      ) as _i3.Stream<R>);

  @override
  _i3.Future<List<_i5.Uint8List>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i3.Future<List<_i5.Uint8List>>.value(<_i5.Uint8List>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.Uint8List>>.value(<_i5.Uint8List>[]),
      ) as _i3.Future<List<_i5.Uint8List>>);

  @override
  _i3.Future<Set<_i5.Uint8List>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i3.Future<Set<_i5.Uint8List>>.value(<_i5.Uint8List>{}),
        returnValueForMissingStub:
            _i3.Future<Set<_i5.Uint8List>>.value(<_i5.Uint8List>{}),
      ) as _i3.Future<Set<_i5.Uint8List>>);

  @override
  _i3.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i3.Future<E>.value(v),
            ) ??
            _FakeFuture_5<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
        returnValueForMissingStub: _i4.ifNotNull(
              _i4.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i3.Future<E>.value(v),
            ) ??
            _FakeFuture_5<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i3.Future<E>);

  @override
  _i3.Stream<_i5.Uint8List> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.Stream<_i5.Uint8List> takeWhile(bool Function(_i5.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.Stream<_i5.Uint8List> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.Stream<_i5.Uint8List> skipWhile(bool Function(_i5.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.Stream<_i5.Uint8List> distinct(
          [bool Function(
            _i5.Uint8List,
            _i5.Uint8List,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);

  @override
  _i3.Future<_i5.Uint8List> firstWhere(
    bool Function(_i5.Uint8List)? test, {
    _i5.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Future<_i5.Uint8List> lastWhere(
    bool Function(_i5.Uint8List)? test, {
    _i5.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Future<_i5.Uint8List> singleWhere(
    bool Function(_i5.Uint8List)? test, {
    _i5.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Future<_i5.Uint8List> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i3.Future<_i5.Uint8List>);

  @override
  _i3.Stream<_i5.Uint8List> timeout(
    Duration? timeLimit, {
    void Function(_i3.EventSink<_i5.Uint8List>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i3.Stream<_i5.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Uint8List>.empty(),
      ) as _i3.Stream<_i5.Uint8List>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i2.HttpHeaders {
  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set expires(DateTime? _expires) => super.noSuchMethod(
        Invocation.setter(
          #expires,
          _expires,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) => super.noSuchMethod(
        Invocation.setter(
          #ifModifiedSince,
          _ifModifiedSince,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set host(String? _host) => super.noSuchMethod(
        Invocation.setter(
          #host,
          _host,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set port(int? _port) => super.noSuchMethod(
        Invocation.setter(
          #port,
          _port,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set contentType(_i2.ContentType? _contentType) => super.noSuchMethod(
        Invocation.setter(
          #contentType,
          _contentType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get chunkedTransferEncoding => (super.noSuchMethod(
        Invocation.getter(#chunkedTransferEncoding),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
        Invocation.setter(
          #chunkedTransferEncoding,
          _chunkedTransferEncoding,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String>? operator [](String? name) => (super.noSuchMethod(
        Invocation.method(
          #[],
          [name],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  String? value(String? name) => (super.noSuchMethod(
        Invocation.method(
          #value,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  void add(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void set(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(
    String? name,
    Object? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #remove,
          [
            name,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(String? name) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forEach(
          void Function(
            String,
            List<String>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void noFolding(String? name) => super.noSuchMethod(
        Invocation.method(
          #noFolding,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
